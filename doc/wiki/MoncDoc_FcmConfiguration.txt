= Configuration of FCM and Subversion =

Some important links:

https://code.metoffice.gov.uk/trac/home/wiki/FAQ#ConfiguringSubversionaccess

https://code.metoffice.gov.uk/trac/home/wiki/AuthenticationCaching

== The fcm-make configuration files ==

Details on the FCM build system can be found from http://metomi.github.io/fcm/doc/.  The configuration files for MONC (located in source:main/trunk/fcm-make) are nested as outlined below:

  1) A compiler configuration (e.g. gnu.cfg)
  2) A machine environment configuration (cray-gnu.cfg)
  3) The main build for MONC (e.g. monc-build.cfg)

To configure MONC for your particular machine, then modify either 1) to pass different compiler flags or 2) to set up different paths to the libraries on your machine.  

== Example from the Monsoon XCM (Cray) with the Gnu compiler ==
(See also how to set up your environments at MoncDoc/MachineConfiguration.)

{{{
#!div style="font-size: 100%"
The compiler configuration (comp-gnu-4.4.7.cfg):
  {{{#!default
  $f90{?} = mpif90
  $cc{?} = cc
  $fflags_opt{?}   = -O3
  $fflags{?}       = $fflags_opt

  $fflags_core{?} = $fflags -frecursive
  $fflags_io{?} = $fflags -fPIC -frecursive
  $fflags_psrc{?}  = -O1 
  $cflags = -fPIC

  $fppdefs_debug{?} =  DEBUG_MODE
  $fpp_flags{?} = -E -P -traditional

  $fppdefs{?} = U_ACTIVE V_ACTIVE W_ACTIVE ENFORCE_THREAD_SAFETY __DARWIN
  $cppdefs{?} = __DARWIN _XOPEN_SOURCE=700 ENFORCE_THREAD_SAFETY
  }}}
}}}
{{{
#!div style="font-size: 100%"
The machine configuration (env-cray.cfg):
  {{{#!default
  $netcdf_path{?}     = $NETCDF_DIR
  $netcdf_inc_path{?} = $netcdf_path/include
  $netcdf_lib_path{?} = $netcdf_path/lib    

  $fftw_path{?}       = $FFTW_DIR/..
  $fftw_inc_path{?}   = $fftw_path/include
  $fftw_lib_path{?}   = $fftw_path/lib    

  $hdf5_path{?}       = $HDF5_DIR
  $hdf5_lib_path{?}   = $hdf5_path/lib
  }}}
}}}
{{{
#!div style="font-size: 100%"
The monc build configuration (monc-build.cfg):
   {{{
 steps = extract preprocess build
 extract.ns = monc

 extract.location{primary}[monc] = https:/code.metoffice.gov.uk/svn/monc/main/
 extract.location[monc]  = trunk

 #extract.location{diff}[monc]  = Any branches you want to include
   
 extract.path-excl[monc] = /
 extract.path-incl[monc] = components core io misc testcases monc_driver.F90

 preprocess.prop{file-ext.h} = .static .h
 preprocess.prop{fpp.flags}  = $fpp_flags
 preprocess.prop{fpp.defs}   = $fppdefs

 preprocess.prop{cpp.defs} =  $cppdefs
 preprocess.prop{cpp.flags} =  $cppdefs

 preprocess.prop{class, no-dep.include} = argsts.h typsts.h s_scmop.h

 build.target                       = monc_driver.exe
 build.prop{class,no-dep.f.module}  = mpi netcdf
 build.prop{class,no-dep.include}   = fftw3.f03
 build.prop{class,fc.include-paths} = $netcdf_inc_path $fftw_inc_path
 build.prop{class,fc}               = $f90
 build.prop{class,fc.flags}         = $fflags
 build.prop{class,fc.libs}          = netcdff netcdf hdf5 hdf5_hl z fftw3 pthread
 build.prop{class,fc.lib-paths}     = $netcdf_lib_path $fftw_lib_path $hdf5_lib_path

 build.prop{class,cc}          =   $cc

 build.prop{fc.flags}[monc/core] = $fflags_core
 build.prop{fc.flags}[monc/io]   = $fflags_io
 build.prop{cc.flags}[monc/io]   = $cflags
 build.prop{fc.flags}[monc/components/pressuresource/src/pressuresource.F90]= $fflags_psrc
 build.prop{fc.flags}[monc/components/fftsolver/src/fftsolver.F90]= $fflags_psrc

  }}}
}}}

These files can then be combined into a single config for your preferred build, e.g.
{{{#!div style="font-size: 100%"
The configuration for building monc on the cray with the gnu compiler (monc-cray-gnu.cfg):
   {{{#!default
include = comp-gnu-4.4.7.cfg
include = env-cray.cfg
include = monc-build.cfg
   }}}
}}}

The FCM compilation would then be run through the command
{{{#!div style="font-size: 100%"
  {{{#!sh
> fcm-make -f fcm-make/monc-cray-gnu.cfg
   }}}
}}}

== Compiling with the Cray compiler on Monsoon ==

This separation of the configuration makes it easy to switch compilers.  So if we want to use the cray compiler we simply select the appropriate compiler configuration.
{{{
#!div style="font-size: 100%"
The compiler configuration for cray compiler (comp-cray-2107.cfg):
  {{{#!default
  $fflags_opt{?}   = -O3 -e m -J .
  $fflags{?}       = $fflags_opt

  $fflags_psrc{?}  = -O1 -e m -J .

  $fflags_core{?} = $fflags  -e R
  $fflags_io{?} = $fflags  -e R
  $cflags = -hgnu

  $fpp_flags{?} = -E -P -traditional

  $fppdefs{?} = U_ACTIVE V_ACTIVE W_ACTIVE ENFORCE_THREAD_SAFETY __DARWIN
  $cppdefs{?} = __DARWIN _XOPEN_SOURCE=700 ENFORCE_THREAD_SAFETY
  }}}
}}}
{{{#!div style="font-size: 100%"
The configuration for building monc on the cray with the cray compiler  (monc-cray-cray.cfg) is then:
   {{{#!default
include = comp-cray-2107.cfg
include = env-cray.cfg
include = monc-build.cfg
   }}}
}}}

and FCM compilation would then be run through the command
{{{#!div style="font-size: 100%"
  {{{#!sh
> fcm-make -f fcm-make/monc-cray-cray.cfg
   }}}
}}}

